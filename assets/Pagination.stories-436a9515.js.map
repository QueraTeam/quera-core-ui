{"version":3,"file":"Pagination.stories-436a9515.js","sources":["../../src/components/Pagination.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Button, Flex, Tooltip, useTheme, useStyleConfig, HTMLChakraProps, ButtonProps } from \"@chakra-ui/react\";\nimport { range } from \"lodash\";\n\nimport { mdiChevronLeft, mdiChevronRight } from \"@mdi/js\";\nimport { persianDigits } from \"../utils/string\";\nimport { MdIcon } from \"./MdIcon\";\nimport { Card } from \"./Card\";\n\nconst calculatePages = (\n  page: number,\n  total: number,\n  pageSize: number,\n  siblingRange: number,\n  beginRange: number,\n  endRange: number,\n) => {\n  const pageCount = Math.ceil(total / pageSize);\n\n  const m1 = beginRange;\n  const m2 = pageCount - endRange + 1;\n  const p1 = Math.max(page - siblingRange, 1);\n  const p2 = Math.min(page + siblingRange, pageCount);\n\n  let groups;\n  if (p1 > m1) {\n    if (m2 > p2) {\n      groups = [range(1, m1 + 1), range(p1, p2 + 1), range(m2, pageCount + 1)];\n    } else {\n      groups = [range(1, m1 + 1), range(Math.min(p1, m2), pageCount + 1), []];\n    }\n  } else if (m2 > p2) {\n    groups = [range(1, Math.max(p2, m1) + 1), range(m2, pageCount + 1), []];\n  } else {\n    groups = [range(1, pageCount + 1), [], []];\n  }\n\n  return { pageCount, groups };\n};\n\ninterface PaginationButtonProps {\n  isDisabled?: boolean;\n  onClick?: () => void;\n  isActive?: boolean;\n  tooltip?: string;\n  display?: ButtonProps[\"display\"];\n  children: React.ReactNode;\n}\n\nconst PaginationButton = ({ isDisabled, onClick, children, isActive, tooltip, display }: PaginationButtonProps) => (\n  <Tooltip isDisabled={tooltip == null} label={tooltip}>\n    <Button\n      aria-label={tooltip ?? undefined}\n      display={display}\n      isDisabled={isDisabled}\n      onClick={() => !isActive && onClick && onClick()}\n      borderBottom={isActive ? \"2px solid\" : \"none\"}\n      colorScheme={isActive ? \"brand\" : \"gray\"}\n      borderColor=\"brand.500\"\n      variant=\"ghost\"\n      borderRadius={0}\n      h=\"2.8rem\"\n      px={4}\n    >\n      {children}\n    </Button>\n  </Tooltip>\n);\n\ninterface NumberGroupProps {\n  page: number;\n  group: number[];\n  renderNumber?: (page: number) => React.ReactNode;\n  onPageChange: (page: number) => void;\n}\n\nconst NumberGroup = ({ page, group, renderNumber, onPageChange }: NumberGroupProps) => (\n  <div>\n    {group.map((i) => (\n      <PaginationButton key={i} isActive={page === i} onClick={() => onPageChange(i)}>\n        {renderNumber ? renderNumber(i) : persianDigits(i)}\n      </PaginationButton>\n    ))}\n  </div>\n);\n\ninterface EllipsisProps {\n  group1: number[];\n  group2: number[];\n}\n\nconst Ellipsis = ({ group1, group2 }: EllipsisProps) => {\n  if (group1.length === 0) return null;\n  if (group2.length === 0) return null;\n  if (group2[0] <= group1[group1.length - 1] + 1) return null;\n  return <PaginationButton isDisabled>...</PaginationButton>;\n};\n\nexport interface PaginationProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * Current page number.\n   */\n  page: number;\n  /**\n   * Total number of items.\n   */\n  total: number;\n  /**\n   * Number of items per page.\n   */\n  pageSize: number;\n  /**\n   * Handler for page change.\n   */\n  onPageChange: (page: number) => any;\n  /**\n   * Number of always visible pages before and after the current one.\n   */\n  siblingRange?: number;\n  /**\n   * Number of always visible pages at the beginning.\n   */\n  beginRange?: number;\n  /**\n   * Number of always visible pages at the end.\n   */\n  endRange?: number;\n  /**\n   * Optional function applied to page numbers before rendering.\n   */\n  renderNumber?: (page: number) => React.ReactNode;\n\n  isMobile: boolean;\n  defaultSiblingRange: number;\n}\n\nexport const Pagination = ({\n  page,\n  total,\n  pageSize,\n  onPageChange,\n  siblingRange = 1,\n  beginRange = 1,\n  endRange = 1,\n  renderNumber,\n  isMobile,\n  defaultSiblingRange,\n  ...rest\n}: PaginationProps) => {\n  const { direction } = useTheme();\n  const styles = useStyleConfig(\"Pagination\", {});\n\n  const finalSiblingsRange = siblingRange || defaultSiblingRange;\n\n  const {\n    pageCount,\n    groups: [group1, group2, group3],\n  } = React.useMemo(\n    () => calculatePages(page, total, pageSize, finalSiblingsRange, beginRange, endRange),\n    [page, total, pageSize, finalSiblingsRange, beginRange, endRange],\n  );\n\n  if (pageCount < 2) return null;\n\n  const prevIcon = direction === \"rtl\" ? mdiChevronRight : mdiChevronLeft;\n  const nextIcon = direction === \"rtl\" ? mdiChevronLeft : mdiChevronRight;\n\n  const hasPrev = page > 1;\n  const hasNext = page < pageCount;\n\n  return (\n    <Card as={Flex} __css={styles} borderRadius={[0, null, \"xl\"]} {...rest}>\n      {!isMobile && (\n        <PaginationButton isDisabled={!hasPrev} onClick={() => onPageChange(page - 1)} tooltip=\"صفحه قبلی\">\n          <MdIcon icon={prevIcon} boxSize={6} />\n        </PaginationButton>\n      )}\n      <NumberGroup page={page} group={group1} renderNumber={renderNumber} onPageChange={onPageChange} />\n      <Ellipsis group1={group1} group2={group2} />\n      <NumberGroup page={page} group={group2} renderNumber={renderNumber} onPageChange={onPageChange} />\n      <Ellipsis group1={group2} group2={group3} />\n      <NumberGroup page={page} group={group3} renderNumber={renderNumber} onPageChange={onPageChange} />\n      {!isMobile && (\n        <PaginationButton isDisabled={!hasNext} onClick={() => onPageChange(page + 1)} tooltip=\"صفحه بعدی\">\n          <MdIcon icon={nextIcon} boxSize={6} />\n        </PaginationButton>\n      )}\n    </Card>\n  );\n};\n"],"names":["calculatePages","page","total","pageSize","siblingRange","beginRange","endRange","pageCount","m1","m2","p1","p2","groups","range","PaginationButton","isDisabled","onClick","children","isActive","tooltip","display","jsx","Tooltip","Button","NumberGroup","group","renderNumber","onPageChange","i","persianDigits","Ellipsis","group1","group2","Pagination","isMobile","defaultSiblingRange","rest","direction","useTheme","styles","useStyleConfig","finalSiblingsRange","group3","React.useMemo","prevIcon","mdiChevronRight","mdiChevronLeft","nextIcon","hasPrev","hasNext","jsxs","Card","Flex","MdIcon"],"mappings":"8tCASA,MAAAA,EAAA,CAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,IAAA,CAQE,MAAAC,EAAA,KAAA,KAAAL,EAAAC,CAAA,EAEAK,EAAAH,EACAI,EAAAF,EAAAD,EAAA,EACAI,EAAA,KAAA,IAAAT,EAAAG,EAAA,CAAA,EACAO,EAAA,KAAA,IAAAV,EAAAG,EAAAG,CAAA,EAEA,IAAAK,EACA,OAAAF,EAAAF,EACEC,EAAAE,EACEC,EAAA,CAAAC,EAAAA,MAAA,EAAAL,EAAA,CAAA,EAAAK,QAAAH,EAAAC,EAAA,CAAA,EAAAE,EAAA,MAAAJ,EAAAF,EAAA,CAAA,CAAA,EAEAK,EAAA,CAAAC,EAAAA,MAAA,EAAAL,EAAA,CAAA,EAAAK,QAAA,KAAA,IAAAH,EAAAD,CAAA,EAAAF,EAAA,CAAA,EAAA,CAAA,CAAA,EACFE,EAAAE,EAEAC,EAAA,CAAAC,EAAAA,MAAA,EAAA,KAAA,IAAAF,EAAAH,CAAA,EAAA,CAAA,EAAAK,EAAA,MAAAJ,EAAAF,EAAA,CAAA,EAAA,CAAA,CAAA,EAEAK,EAAA,CAAAC,EAAA,MAAA,EAAAN,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAGF,CAAA,UAAAA,EAAA,OAAAK,EACF,EAWAE,EAAA,CAAA,CAAA,WAAAC,EAAA,QAAAC,EAAA,SAAAC,EAAA,SAAAC,EAAA,QAAAC,EAAA,QAAAC,CAAA,IAAAC,EAAAC,EAAA,CAAA,WAAAH,GAAA,KAAA,MAAAA,EAAA,SAAAE,EAEIE,EAAC,CAAA,aAAAJ,GAAA,OACwB,QAAAC,EACvB,WAAAL,EACA,QAAA,IAAA,CAAAG,GAAAF,GAAAA,EAAA,EAC+C,aAAAE,EAAA,YAAA,OACR,YAAAA,EAAA,QAAA,OACL,YAAA,YACtB,QAAA,QACJ,aAAA,EACM,EAAA,SACZ,GAAA,EACE,SAAAD,CAEH,CACH,CAAA,CAAA,EAWJO,EAAA,CAAA,CAAA,KAAAvB,EAAA,MAAAwB,EAAA,aAAAC,EAAA,aAAAC,CAAA,IAAAN,EAAA,MAAA,CAAA,SAAAI,EAAA,IAAAG,GAAAP,EAAAP,EAAA,CAAA,SAAAb,IAAA2B,EAAA,QAAA,IAAAD,EAAAC,CAAA,EAAA,SAAAF,EAAAA,EAAAE,CAAA,EAAAC,EAAAD,CAAA,CAAA,EAAAA,CAAA,CAAA,CAAA,CAAA,EAeAE,EAAA,CAAA,CAAA,OAAAC,EAAA,OAAAC,KACED,EAAA,SAAA,GACAC,EAAA,SAAA,GACAA,EAAA,CAAA,GAAAD,EAAAA,EAAA,OAAA,CAAA,EAAA,EAAgD,KAChDV,EAAAP,EAAA,CAAA,WAAA,GAAA,SAAA,KAAA,CAAA,EAyCKmB,EAAA,CAAA,CAAoB,KAAAhC,EACzB,MAAAC,EACA,SAAAC,EACA,aAAAwB,EACA,aAAAvB,EAAA,EACe,WAAAC,EAAA,EACF,SAAAC,EAAA,EACF,aAAAoB,EACX,SAAAQ,EACA,oBAAAC,EACA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAA,UAAAC,GAAAC,IACAC,EAAAC,EAAA,aAAA,CAAA,CAAA,EAEAC,EAAArC,GAAA+B,EAEA,CAAM,UAAA5B,EACJ,OAAA,CAAAwB,EAAAC,EAAAU,CAAA,CAC+B,EAAAC,EAAA,QACvB,IAAA3C,EAAAC,EAAAC,EAAAC,EAAAsC,EAAApC,EAAAC,CAAA,EAC4E,CAAAL,EAAAC,EAAAC,EAAAsC,EAAApC,EAAAC,CAAA,CACpB,EAGlE,GAAAC,EAAA,EAAmB,OAAA,KAEnB,MAAAqC,EAAAP,IAAA,MAAAQ,EAAAC,EACAC,EAAAV,IAAA,MAAAS,EAAAD,EAEAG,EAAA/C,EAAA,EACAgD,EAAAhD,EAAAM,EAEA,OAAA2C,EAAAC,EAAA,CAAA,GAAAC,EAAA,MAAAb,EAAA,aAAA,CAAA,EAAA,KAAA,IAAA,EAAA,GAAAH,EAAA,SAAA,CAEK,CAAAF,GAAAb,EAAAP,EAAA,CAAA,WAAA,CAAAkC,EAAA,QAAA,IAAArB,EAAA1B,EAAA,CAAA,EAAA,QAAA,YAAA,SAAAoB,EAAAgC,EAAA,CAAA,KAAAT,EAAA,QAAA,CAAA,CAAA,EAAA,EAGCvB,EAAAG,EAAA,CAAA,KAAAvB,EAAA,MAAA8B,EAAA,aAAAL,EAAA,aAAAC,EAAA,EAE8FN,EAAAS,EAAA,CAAA,OAAAC,EAAA,OAAAC,CAAA,CAAA,EACtDX,EAAAG,EAAA,CAAA,KAAAvB,EAAA,MAAA+B,EAAA,aAAAN,EAAA,aAAAC,EAAA,EACsDN,EAAAS,EAAA,CAAA,OAAAE,EAAA,OAAAU,EAAA,EACtDrB,EAAAG,EAAA,CAAA,KAAAvB,EAAA,MAAAyC,EAAA,aAAAhB,EAAA,aAAAC,EAAA,EACsD,CAAAO,GAAAb,EAAAP,EAAA,CAAA,WAAA,CAAAmC,EAAA,QAAA,IAAAtB,EAAA1B,EAAA,CAAA,EAAA,QAAA,YAAA,SAAAoB,EAAAgC,EAAA,CAAA,KAAAN,EAAA,QAAA,CAAA,CAAA,EAAA,CAI9F,CAAA,CAAA,CAIR;;;;"}